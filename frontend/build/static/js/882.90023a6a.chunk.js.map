{"version":3,"file":"static/js/882.90023a6a.chunk.js","mappings":"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","sources":["components/post/board-oppost/BoardOppost.jsx","components/board/board-main/board-main-thread/BoardMainThread.jsx","components/board/board-main/board-main-thread/board-main-threads/BoardMainThreads.jsx","components/board/board-main/BoardMain.jsx"],"sourcesContent":["import './board-oppost.scss'\nimport { Link } from 'react-router-dom'\nimport PostCommonHeader from \"../components/post-header/PostCommonHeader\"\nimport PostCommonBody from \"../components/post-body/PostCommonBody\"\nimport BtnTriangle from \"../../buttons/triangle/BtnTriangle\"\nimport BtnFavorite from '../../buttons/favorite/BtnFavorite'\nimport BtnHide from '../../buttons/hide/BtnHide'\n\nfunction BoardMainOppost(props) {\n    return (\n        <div className='board-oppost' id={props.post.id}>\n            <div className=\"board-oppost__header\">\n                <PostCommonHeader createdat={props.post.createdAt} id={props.post.id} username={props.post.userName} />\n                <Link key={props.post.ThreadId} to={`${props.post.ThreadId}`} className='board-oppost__post-id'>Ответ</Link>\n                <div className=\"board-oppost__btns\">\n                    <div className=\"board-oppost__btns-wr\">\n                        <BtnFavorite params={{ threadId: props.post.ThreadId, lastpost: props.lastpost, postTitle: props.post.postTitle }} />\n                    </div>\n                    <div className=\"board-oppost__btns-wr\">\n                        <BtnHide idparams={{ postId: props.post.id }} />\n                        <BtnTriangle idparams={{ threadId: props.post.ThreadId, postId: props.post.id }} />\n                    </div>\n                </div>\n            </div>\n            <PostCommonBody post={props.post} />\n            <div className=\"board-oppost__footer\">\n                <p className=\"\">Пропущено {props.totalCount - props.shown} сообщений, 0 с картинками.</p>\n            </div>\n        </div>\n    )\n}\n\nexport default BoardMainOppost","import './bmt.scss'\nimport BoardMainOppost from '../../../post/board-oppost/BoardOppost';\nimport Post from '../../../post/post/Post';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { showPost } from \"../../../../store/states/appState\"\n\nconst BoardMainThread = (props) => {\n  const disp = useDispatch()\n  const isHide = useSelector(state => state.appState.hiddenPostsAndThreads)\n\n  return (\n    <div className=\"board-main-thread\">\n      {isHide[props.posts[0].id]\n        ? <div className=\"board-main-oppost\" onClick={() => disp(showPost(props.posts[0].id))}>Скрытый тред №{props.posts[0].id} ({props.posts[0].postTitle})</div>\n        : <>\n          <BoardMainOppost totalCount={props.totalCount} shown={props.posts.slice(1).length + 1} key={props.posts[0].id} post={props.posts[0]} lastpost={props.posts[props.posts.length - 1].id}/>\n          {props.posts.slice(1).map((elem) => (\n            isHide[elem.id]\n              ? <div onClick={() => disp(showPost(elem.id))}>Скрытый пост №{elem.id} ({elem.postTitle})</div>\n              : <Post key={elem.id} posttype={\"post\"} post={elem} />\n          ))}\n        </>\n      }\n    </div>\n  );\n}\n\nexport default BoardMainThread","import { useState, useEffect } from 'react'\nimport '../../boardmain.scss'\nimport AppReq from '../../../../../services/axios/app'\nimport { useParams } from 'react-router-dom'\nimport BoardMainThread from '../BoardMainThread'\nimport { useDispatch } from 'react-redux'\nimport { clearPosts } from '../../../../../store/states/replyPostsState'\n\nconst BoardMainThreads = (() => {\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [threads, setThreads] = useState([])\n    const path = useParams()\n    const disp = useDispatch()\n    let page = 0\n    let dymPageisLoaded = false\n    let appreq = new AppReq()\n\n    async function dynamicPaginagtion() {\n        if (dymPageisLoaded && window.pageYOffset + window.screen.height >= document.body.scrollHeight) {\n            dymPageisLoaded = false\n            let resp = await appreq.getAllThreadsOnBoard(Object.values(path)[0], page++)\n            if (resp.length > 0) {\n                setThreads((oldThreads) => oldThreads.concat(resp))\n                dymPageisLoaded = true\n            }\n        }\n    }\n\n    useEffect(() => {\n        window.scroll(0, 0)\n        async function fetchData() {\n            let resp = await appreq.getAllThreadsOnBoard(Object.values(path)[0], page++)\n            setThreads(() => resp)\n            setIsLoaded(() => true)\n            dymPageisLoaded = true\n        }\n        fetchData()\n        window.addEventListener(\"scroll\", dynamicPaginagtion)\n        return () => {\n            window.removeEventListener(\"scroll\", dynamicPaginagtion)\n            disp(clearPosts())\n        }\n    }, [path]);\n\n    return (\n        <>\n            {isLoaded\n                ? threads.map((elem) => (\n                    <BoardMainThread key={elem.rows[0].ThreadId} totalCount={elem.count} posts={elem.rows} />\n                ))\n                : <div>Loading...</div>\n            }\n        </>\n    );\n})\n\nexport default BoardMainThreads","import './boardmain.scss'\nimport ReplyPostsCont from '../../containers/reply-posts-cont/ReplyPostsCont'\nimport BoardMainThreads from './board-main-thread/board-main-threads/BoardMainThreads'\n\nconst BoardMain = (() => {\n\n  return (\n    <main className='board-main'>\n      <BoardMainThreads />\n      <ReplyPostsCont />\n    </main>\n  );\n})\n\nexport default BoardMain;"],"names":["props","className","id","post","PostCommonHeader","createdat","createdAt","username","userName","to","ThreadId","BtnFavorite","params","threadId","lastpost","postTitle","BtnHide","idparams","postId","BtnTriangle","PostCommonBody","totalCount","shown","disp","useDispatch","isHide","useSelector","state","appState","hiddenPostsAndThreads","posts","onClick","showPost","slice","length","map","elem","Post","posttype","useState","isLoaded","setIsLoaded","threads","setThreads","path","useParams","page","dymPageisLoaded","appreq","AppReq","dynamicPaginagtion","window","pageYOffset","screen","height","document","body","scrollHeight","getAllThreadsOnBoard","Object","values","resp","oldThreads","concat","useEffect","scroll","fetchData","addEventListener","removeEventListener","clearPosts","count","rows","ReplyPostsCont"],"sourceRoot":""}