{"version":3,"file":"static/js/527.338e1458.chunk.js","mappings":"sQA2BA,MApBA,SAAgBA,GACZ,OACI,iBAAKC,UAAU,SAASC,GAAIF,EAAMG,KAAKD,GAAvC,WACI,iBAAKD,UAAU,iBAAf,WACI,SAACG,EAAA,EAAD,CAAkBC,UAAWL,EAAMG,KAAKG,UAAWJ,GAAIF,EAAMG,KAAKD,GAAIK,SAAUP,EAAMG,KAAKK,YAC3F,iBAAKP,UAAU,eAAf,WACI,gBAAKA,UAAU,kBAAf,UACI,SAACQ,EAAA,EAAD,CAAaC,OAAQ,CAAEC,SAAUX,EAAMG,KAAKS,SAAUC,SAAUb,EAAMa,SAAUC,UAAWd,EAAMG,KAAKW,gBAE1G,iBAAKb,UAAU,kBAAf,WACI,SAACc,EAAA,EAAD,CAASC,SAAU,CAAEC,OAAQjB,EAAMG,KAAKD,OACxC,SAACgB,EAAA,EAAD,CAAaF,SAAU,CAAEL,SAAUX,EAAMG,KAAKS,SAAUK,OAAQjB,EAAMG,KAAKD,gBAIvF,SAACiB,EAAA,EAAD,CAAgBhB,KAAMH,EAAMG,W,4DCoCxC,MA/CA,WACE,IAAIiB,EAAOC,OAAOC,QAAOC,EAAAA,EAAAA,OAAa,GAAGC,MAAM,KACzCC,GAAOC,EAAAA,EAAAA,MACPC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASH,UAC7CI,GAASH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASE,yBAC7CC,GAAkBL,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASG,mBAyB5D,OAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,+FACMC,EAAM,IAAIC,EAAAA,EADhB,SAEqBD,EAAIE,UAAUjB,EAAK,GAAIA,EAAK,IAFjD,OAEMO,EAFN,OAGEF,GAAKa,EAAAA,EAAAA,IAAUX,KACXV,EAASsB,OAAOC,SAASC,KAAKjB,MAAM,KAAK,KAE3CkB,SAASC,eAAe1B,GAAQ2B,iBAE9BX,EAAgBN,EAAO,GAAGf,WAC5Ba,GAAKoB,EAAAA,EAAAA,IAAc,CAAClB,EAAO,GAAGf,SAAUe,EAAOA,EAAOmB,OAAS,GAAG5C,MATtE,2CAFc,wBACdqC,OAAOQ,OAAO,EAAG,GADH,mCAcdC,KACC,CAAC5B,EAAK,MAETc,EAAAA,EAAAA,YAAU,WACJP,GAAUM,EAAgBN,EAAO,GAAGf,WACtCa,GAAKoB,EAAAA,EAAAA,IAAc,CAAClB,EAAO,GAAGf,SAAUe,EAAOA,EAAOmB,OAAS,GAAG5C,QAEnE,CAACyB,KAGF,kBAAM1B,UAAU,SAAhB,UACG0B,GACC,4BACE,SAAC,EAAD,CAA2BxB,KAAMwB,EAAO,GAAId,SAAUc,EAAOA,EAAOmB,OAAS,GAAG5C,IAAnEyB,EAAO,GAAGzB,IACtByB,EAAOsB,MAAM,GAAGC,KAAI,SAAAC,GAAI,OACvBpB,EAAOoB,EAAKjD,KACR,iBAAKkD,QAAS,kBAAM3B,GAAK4B,EAAAA,EAAAA,IAASF,EAAKjD,MAAvC,uFAA4DiD,EAAKjD,GAAjE,KAAuEiD,EAAKrC,UAA5E,QACA,SAACwC,EAAA,EAAD,CAAoBC,SAAU,OAAQpD,KAAMgD,GAAjCA,EAAKjD,WAGtB,yCAEJ,SAACsD,EAAA,EAAD","sources":["components/post/oppost/Oppost.jsx","components/thread/Thread.jsx"],"sourcesContent":["import './oppost.scss'\nimport PostCommonHeader from \"../components/post-header/PostCommonHeader\"\nimport PostCommonBody from \"../components/post-body/PostCommonBody\"\nimport BtnTriangle from \"../../buttons/triangle/BtnTriangle\"\nimport BtnFavorite from '../../buttons/favorite/BtnFavorite'\nimport BtnHide from '../../buttons/hide/BtnHide'\n\nfunction Oppost(props) {\n    return (\n        <div className=\"oppost\" id={props.post.id}>\n            <div className=\"oppost__header\">\n                <PostCommonHeader createdat={props.post.createdAt} id={props.post.id} username={props.post.userName} />\n                <div className=\"oppost__btns\">\n                    <div className=\"oppost__btns-wr\">\n                        <BtnFavorite params={{ threadId: props.post.ThreadId, lastpost: props.lastpost, postTitle: props.post.postTitle }} />\n                    </div>\n                    <div className=\"oppost__btns-wr\">\n                        <BtnHide idparams={{ postId: props.post.id }} />\n                        <BtnTriangle idparams={{ threadId: props.post.ThreadId, postId: props.post.id }} />\n                    </div>\n                </div>\n            </div>\n            <PostCommonBody post={props.post} />\n        </div>\n    )\n}\n\nexport default Oppost","import { useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport Oppost from \"../post/oppost/Oppost\"\nimport Post from \"../post/post/Post\"\nimport AppReq from \"../../services/axios/app\"\nimport \"./thread.scss\"\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setThread, showPost, checkFavorite } from \"../../store/states/appState\"\nimport { addThread } from '../../store/states/replyPostsState'\nimport ReplyPostsCont from '../containers/reply-posts-cont/ReplyPostsCont'\n\nfunction Thread() {\n  let path = Object.values(useParams())[0].split('/')\n  const disp = useDispatch()\n  const thread = useSelector(state => state.appState.thread)\n  const isHide = useSelector(state => state.appState.hiddenPostsAndThreads)\n  const favoriteThreads = useSelector(state => state.appState.favoriteThreads)\n\n  useEffect(() => {\n    window.scroll(0, 0)\n    async function fetchData() {\n      let req = new AppReq()\n      let thread = await req.getThread(path[1], path[0])\n      disp(setThread(thread))\n      let postId = window.location.href.split(\"#\")[1]\n      if (postId) {\n        document.getElementById(postId).scrollIntoView()\n      }\n      if (favoriteThreads[thread[0].ThreadId]) {\n        disp(checkFavorite([thread[0].ThreadId, thread[thread.length - 1].id]))\n      }\n    }\n    fetchData()\n  }, [path[1]])\n\n  useEffect(() => {\n    if (thread && favoriteThreads[thread[0].ThreadId]) {\n      disp(checkFavorite([thread[0].ThreadId, thread[thread.length - 1].id]))\n    }\n  }, [thread])\n\n  return (\n    <main className='thread'>\n      {thread ?\n        <div>\n          <Oppost key={thread[0].id} post={thread[0]} lastpost={thread[thread.length - 1].id} />\n          {thread.slice(1).map(elem =>\n            isHide[elem.id]\n              ? <div onClick={() => disp(showPost(elem.id))}>Скрытый пост №{elem.id} ({elem.postTitle})</div>\n              : <Post key={elem.id} posttype={\"post\"} post={elem} />\n          )}\n        </div>\n        : <div>Loading...</div>\n      }\n      <ReplyPostsCont />\n    </main>\n  )\n}\nexport default Thread\n"],"names":["props","className","id","post","PostCommonHeader","createdat","createdAt","username","userName","BtnFavorite","params","threadId","ThreadId","lastpost","postTitle","BtnHide","idparams","postId","BtnTriangle","PostCommonBody","path","Object","values","useParams","split","disp","useDispatch","thread","useSelector","state","appState","isHide","hiddenPostsAndThreads","favoriteThreads","useEffect","req","AppReq","getThread","setThread","window","location","href","document","getElementById","scrollIntoView","checkFavorite","length","scroll","fetchData","slice","map","elem","onClick","showPost","Post","posttype","ReplyPostsCont"],"sourceRoot":""}